#!/usr/bin/env python3
"""
Test du traitement des objets dict Python (donn√©es d√©j√† structur√©es) 
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

from services.report_generator import ReportGenerator

def test_dict_objects():
    print("üß™ Test du traitement des objets dict Python")
    print("=" * 60)
    
    generator = ReportGenerator()
    
    # Donn√©es comme retourn√©es par l'AnalysisService (objets dict d√©j√† pars√©s)
    analysis_data_with_dict_objects = {
        "meta": {
            "projectName": "Test Dict Objects",
            "meetingTitle": "Test des objets dict",
            "date": "09/09/2025"
        },
        "sectionsDynamiques": {
            "decisionsStrategiques": [
                {
                    "decision": "R√©aliser une inspection ROV apr√®s une bathym√©trie 3D",
                    "context": "Pour lever les doutes sur le projet",
                    "contexteTemporel": "[00:00-16:07]"
                },
                {
                    "decision": "Valider les calculs avec le bureau d'√©tudes sp√©cialis√©",
                    "context": "S√©curisation des √©quipements de levage",
                    "contexteTemporel": "[16:08-24:15]"
                }
            ],
            "aspectsTechniques": [
                {
                    "detail": "Treuils de 10 tonnes recalcul√©s √† 4 tonnes, v√©rins de 8 tonnes pour une machine de 6 tonnes.",
                    "context": "Calculs surdimensionn√©s pour les treuils et v√©rins.",
                    "contexteTemporel": "[32:14 - 48:22]"
                },
                {
                    "detail": "Machine √©quip√©e de v√©rins hydrauliques de 8 tonnes pour supporter une charge de 6 tonnes maximum.",
                    "context": "S√©curit√© renforc√©e par surdimensionnement.",
                    "contexteTemporel": "[48:23 - 52:10]"
                }
            ]
        }
    }
    
    print("üìä Donn√©es avec objets dict Python:")
    for section, items in analysis_data_with_dict_objects["sectionsDynamiques"].items():
        print(f"  {section}: {len(items)} items")
        for i, item in enumerate(items):
            print(f"    Item {i+1}: {type(item)} - {list(item.keys()) if isinstance(item, dict) else item}")
    
    print("\nüìÑ G√©n√©ration du document Word...")
    
    # Test avec donn√©es dict structur√©es
    output_path = "/tmp/test_dict_objects.docx"
    
    transcript_segments = [
        {
            "speaker": "Test Speaker",
            "text": "Test avec objets dict",
            "timestamp": "00:00-00:30"
        }
    ]
    
    meeting_metadata = {
        "title": "Test Dict Objects",
        "date": "09/09/2025",
        "project": "Test Objets Dict",
        "participants": ["Dev", "Test"]
    }
    
    try:
        success = generator.generate_report(analysis_data_with_dict_objects, transcript_segments, meeting_metadata, output_path)
        
        if success and os.path.exists(output_path):
            file_size = os.path.getsize(output_path)
            print(f"‚úÖ Document g√©n√©r√© avec succ√®s: {output_path}")
            print(f"‚úÖ Taille: {file_size} bytes")
            
            print(f"\nüîç V√©rifications √† effectuer:")
            print(f"  1. Les phrases compl√®tes apparaissent-elles dans les tableaux ?")
            print(f"  2. 'Treuils de 10 tonnes recalcul√©s √† 4 tonnes, v√©rins de 8 tonnes pour une machine de 6 tonnes.'")
            print(f"  3. 'bureau d'√©tudes sp√©cialis√©' (avec apostrophe)")
            print(f"  4. Les colonnes Context et Temps sont-elles bien remplies ?")
            
            print(f"\nüìÑ Ouverture du document pour v√©rification...")
            os.system(f'open "{output_path}"')
            
        else:
            print("‚ùå √âchec de g√©n√©ration du document")
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_dict_objects()