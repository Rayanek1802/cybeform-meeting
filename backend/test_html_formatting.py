#!/usr/bin/env python3
"""
Test du formatage HTML avec dictionnaires Python
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

from services.report_generator import ReportGenerator

def test_html_formatting():
    print("üåê Test du formatage HTML avec objets dict")
    print("=" * 60)
    
    generator = ReportGenerator()
    
    # Donn√©es avec objets dict comme retourn√©s par l'AnalysisService
    analysis_data = {
        "meta": {
            "projectName": "Test HTML Formatting",
            "meetingTitle": "Test du formatage",
            "meetingDate": "09/09/2025"
        },
        "sectionsDynamiques": {
            "decisionsStrategiques": [
                {
                    "decision": "R√©aliser une inspection ROV apr√®s une bathym√©trie 3D",
                    "context": "Pour lever les doutes sur le projet",
                    "contexteTemporel": "[00:00-16:07]"
                },
                {
                    "decision": "Valider les calculs avec le bureau d'√©tudes sp√©cialis√©", 
                    "context": "S√©curisation des √©quipements de levage",
                    "contexteTemporel": "[16:08-24:15]"
                }
            ],
            "aspectsTechniques": [
                {
                    "detail": "Treuils de 10 tonnes recalcul√©s √† 4 tonnes, v√©rins de 8 tonnes pour une machine de 6 tonnes.",
                    "context": "Calculs surdimensionn√©s pour les treuils et v√©rins.",
                    "contexteTemporel": "[32:14 - 48:22]"
                }
            ]
        }
    }
    
    meeting_metadata = {
        "title": "Test HTML",
        "date": "09/09/2025",
        "project": "Test Formatage HTML"
    }
    
    print("üìä G√©n√©ration du HTML preview...")
    
    try:
        html_content = generator.generate_html_preview(analysis_data, meeting_metadata)
        
        # Sauvegarder le HTML pour inspection
        output_file = "/tmp/test_html_formatting.html"
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print(f"‚úÖ HTML g√©n√©r√©: {output_file}")
        
        # Extraire et afficher les parties importantes
        print(f"\nüîç Extrait du contenu HTML g√©n√©r√©:")
        print("-" * 50)
        
        # Chercher les sections de d√©cisions et aspects techniques
        if "R√©aliser une inspection ROV" in html_content:
            print("‚úÖ D√©cision trouv√©e dans le HTML")
        else:
            print("‚ùå D√©cision manquante")
            
        if "Treuils de 10 tonnes recalcul√©s" in html_content:
            print("‚úÖ D√©tail technique trouv√© dans le HTML")
        else:
            print("‚ùå D√©tail technique manquant")
            
        # V√©rifier qu'il n'y a plus de dictionnaires bruts
        if "{'decision':" in html_content or "{'detail':" in html_content:
            print("‚ùå PROBL√àME: Des dictionnaires bruts sont encore pr√©sents")
        else:
            print("‚úÖ Aucun dictionnaire brut d√©tect√©")
        
        # V√©rifier la pr√©sence de formatage HTML
        if "<strong>" in html_content and "<em>" in html_content:
            print("‚úÖ Formatage HTML pr√©sent (strong, em)")
        else:
            print("‚ö†Ô∏è  Formatage HTML basique")
            
        print(f"\nüåê Ouverture du fichier HTML pour inspection visuelle...")
        os.system(f'open "{output_file}"')
        
        print(f"\nüìã Ce qu'il faut v√©rifier dans le navigateur:")
        print(f"  1. Les d√©cisions sont affich√©es clairement avec le texte en gras")
        print(f"  2. Le contexte appara√Æt en italique sous chaque √©l√©ment")
        print(f"  3. Les moments temporels sont affich√©s avec l'ic√¥ne ‚è±Ô∏è")
        print(f"  4. Aucun dictionnaire brut du type '{{'decision': '...''}}' n'est visible")
        print(f"  5. La phrase compl√®te 'Treuils de 10 tonnes...' est enti√®rement visible")
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_html_formatting()