#!/usr/bin/env python3
"""
Test script pour tester la g√©n√©ration compl√®te de documents Word avec les phrases compl√®tes
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

from services.report_generator import ReportGenerator

def test_word_generation():
    print("üìÑ Test de g√©n√©ration de document Word")
    print("=" * 50)
    
    generator = ReportGenerator()
    
    # Donn√©es de test similaires au probl√®me rencontr√©
    test_analysis = """
Technicaldetails
    {'detail': 'Treuils de 10 tonnes recalcul√©s √† 4 tonnes, v√©rins de 8 tonnes pour une machine de 6 tonnes.', 'context': 'Calculs surdimensionn√©s pour les treuils et v√©rins.', 'contexteTemporel': '[32:14 - 48:22]'}
    {'detail': 'Machine √©quip√©e de v√©rins hydrauliques de 8 tonnes pour supporter une charge de 6 tonnes maximum.', 'context': 'S√©curit√© renforc√©e par surdimensionnement.', 'contexteTemporel': '[48:23 - 52:10]'}

Decisions
    {'decision': 'R√©aliser une inspection ROV apr√®s une bathym√©trie 3D', 'context': 'Pour lever les doutes sur le projet', 'contexteTemporel': '[00:00-16:07]'}
    {'decision': 'Valider les calculs de charge avec le bureau d\'√©tudes sp√©cialis√©', 'context': 'S√©curisation des √©quipements de levage', 'contexteTemporel': '[16:08-24:15]'}

Recommendations
    {'recommendation': 'Effectuer un contr√¥le technique approfondi avant mise en service', 'context': 'S√©curit√© des op√©rations de levage', 'contexteTemporel': '[52:11-58:30]'}
"""
    
    print("üìä G√©n√©ration du rapport Word...")
    
    try:
        # G√©n√©ration du document Word
        output_path = "/tmp/test_rapport_complet.docx"
        
        # Pr√©parer les m√©tadonn√©es de la r√©union
        meeting_metadata = {
            "title": "R√©union Test - V√©rification Phrases Compl√®tes",
            "date": "09/09/2025",
            "project": "Test des am√©liorations de parsing",
            "participants": ["D√©veloppeur", "Testeur"],
            "duration": "1h30",
            "location": "Local Test"
        }
        
        # Pr√©parer les donn√©es d'analyse avec sections pars√©es manuellement
        analysis_data = {
            "summary": "Test de g√©n√©ration de rapport avec phrases compl√®tes",
            "decisions": [
                {
                    "decision": "R√©aliser une inspection ROV apr√®s une bathym√©trie 3D",
                    "context": "Pour lever les doutes sur le projet",
                    "contexteTemporel": "[00:00-16:07]"
                },
                {
                    "decision": "Valider les calculs de charge avec le bureau d'√©tudes sp√©cialis√©",
                    "context": "S√©curisation des √©quipements de levage",
                    "contexteTemporel": "[16:08-24:15]"
                }
            ],
            "technical_details": [
                {
                    "detail": "Treuils de 10 tonnes recalcul√©s √† 4 tonnes, v√©rins de 8 tonnes pour une machine de 6 tonnes.",
                    "context": "Calculs surdimensionn√©s pour les treuils et v√©rins.",
                    "contexteTemporel": "[32:14 - 48:22]"
                },
                {
                    "detail": "Machine √©quip√©e de v√©rins hydrauliques de 8 tonnes pour supporter une charge de 6 tonnes maximum.",
                    "context": "S√©curit√© renforc√©e par surdimensionnement.",
                    "contexteTemporel": "[48:23 - 52:10]"
                }
            ],
            "recommendations": [
                {
                    "recommendation": "Effectuer un contr√¥le technique approfondi avant mise en service",
                    "context": "S√©curit√© des op√©rations de levage",
                    "contexteTemporel": "[52:11-58:30]"
                }
            ],
            "risks": [],
            "participants": [
                {"name": "D√©veloppeur", "role": "D√©veloppement"},
                {"name": "Testeur", "role": "Tests"}
            ],
            "chronological_data": [],
            "metrics": {
                "total_speakers": 2,
                "total_duration": "1h30",
                "key_topics": 3
            }
        }
        
        # Segments de transcription factice pour le test
        transcript_segments = [
            {
                "speaker": "D√©veloppeur",
                "text": "Nous devons v√©rifier que les phrases compl√®tes apparaissent dans le document Word g√©n√©r√©.",
                "timestamp": "00:00-00:30"
            },
            {
                "speaker": "Testeur", 
                "text": "Effectivement, les treuils de 10 tonnes recalcul√©s √† 4 tonnes, v√©rins de 8 tonnes pour une machine de 6 tonnes doivent √™tre affich√©s compl√®tement.",
                "timestamp": "32:14-48:22"
            }
        ]
        
        generator.generate_report(analysis_data, transcript_segments, meeting_metadata, output_path)
        
        print(f"‚úÖ Document g√©n√©r√© avec succ√®s: {output_path}")
        print()
        print("üîç V√©rifications √† effectuer manuellement:")
        print("1. Ouvrir le fichier Word g√©n√©r√©")
        print("2. V√©rifier que les phrases dans les tableaux sont compl√®tes:")
        print("   - 'Treuils de 10 tonnes recalcul√©s √† 4 tonnes, v√©rins de 8 tonnes pour une machine de 6 tonnes.'")
        print("   - 'Machine √©quip√©e de v√©rins hydrauliques de 8 tonnes pour supporter une charge de 6 tonnes maximum.'")
        print("   - 'R√©aliser une inspection ROV apr√®s une bathym√©trie 3D'")
        print("   - 'Valider les calculs de charge avec le bureau d\\'√©tudes sp√©cialis√©'")
        print("   - 'Effectuer un contr√¥le technique approfondi avant mise en service'")
        print("3. V√©rifier que les colonnes Context et Temps sont bien remplies")
        print("4. V√©rifier que le texte n'est pas tronqu√© dans les cellules")
        
        # Test additionnel: parsing des donn√©es
        print("\nüß™ Test du parsing sur les donn√©es compl√®tes:")
        sections = generator._extract_sections(test_analysis)
        
        for section_name, items in sections.items():
            if items:
                print(f"\nüìã {section_name.upper()}:")
                for i, item in enumerate(items, 1):
                    if isinstance(item, dict):
                        main_key = next(iter(item.keys()))
                        main_value = item[main_key]
                        print(f"   {i}. {main_value[:80]}{'...' if len(main_value) > 80 else ''}")
                        print(f"      Longueur: {len(main_value)} caract√®res")
    
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_word_generation()