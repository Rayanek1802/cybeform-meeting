#!/usr/bin/env python3
"""
Script to create demo data for CybeMeeting MVP
Creates sample projects and meetings for testing and demonstration
"""
import os
import sys
import json
import uuid
from datetime import datetime, timedelta
from pathlib import Path

# Add the backend to Python path
backend_path = Path(__file__).parent.parent / "backend"
sys.path.insert(0, str(backend_path))

# Change to backend directory for imports
os.chdir(backend_path)

from app.core.config import settings


def create_demo_data():
    """Create demo projects and meetings"""
    
    # Ensure data directory exists
    data_dir = Path(settings.DATA_PATH)
    projects_dir = data_dir / "projects"
    projects_dir.mkdir(parents=True, exist_ok=True)
    
    print("üèóÔ∏è  Cr√©ation des donn√©es de d√©monstration...")
    
    # Demo projects
    demo_projects = [
        {
            "name": "R√©novation Immeuble Haussman",
            "meetings": [
                {
                    "title": "R√©union de lancement projet",
                    "expected_speakers": 4,
                    "status": "Termin√©",
                    "duration": 1800,  # 30 minutes
                    "participants_detected": ["Chef de projet", "Architecte", "Ma√Ætre d'ouvrage", "Coordinateur BTP"]
                },
                {
                    "title": "Point s√©curit√© chantier",
                    "expected_speakers": 3,
                    "status": "Termin√©", 
                    "duration": 900,   # 15 minutes
                    "participants_detected": ["Responsable s√©curit√©", "Chef de chantier", "Coordinateur SPS"]
                }
            ]
        },
        {
            "name": "Construction Centre Commercial",
            "meetings": [
                {
                    "title": "R√©union planning phase 1",
                    "expected_speakers": 5,
                    "status": "En attente",
                    "duration": None,
                    "participants_detected": []
                }
            ]
        },
        {
            "name": "R√©habilitation Pont M√©tallique",
            "meetings": [
                {
                    "title": "Diagnostic structure existante",
                    "expected_speakers": 3,
                    "status": "En cours de traitement",
                    "duration": 2400,  # 40 minutes
                    "participants_detected": ["Ing√©nieur structure", "Expert mat√©riaux", "G√©om√®tre"]
                }
            ]
        }
    ]
    
    created_projects = []
    
    for project_data in demo_projects:
        # Create project
        project_id = str(uuid.uuid4())
        project_dir = projects_dir / project_id
        project_dir.mkdir(exist_ok=True)
        
        # Create meetings directory
        meetings_dir = project_dir / "meetings"
        meetings_dir.mkdir(exist_ok=True)
        
        # Create project metadata
        project = {
            "id": project_id,
            "name": project_data["name"],
            "created_at": (datetime.now() - timedelta(days=30)).isoformat(),
            "meetings": []
        }
        
        # Create meetings
        for i, meeting_data in enumerate(project_data["meetings"]):
            meeting_id = str(uuid.uuid4())
            meeting_dir = meetings_dir / meeting_id
            meeting_dir.mkdir(exist_ok=True)
            
            # Create meeting metadata
            meeting = {
                "id": meeting_id,
                "title": meeting_data["title"],
                "date": (datetime.now() - timedelta(days=20-i*5)).isoformat(),
                "expected_speakers": meeting_data["expected_speakers"],
                "status": meeting_data["status"],
                "progress": 100 if meeting_data["status"] == "Termin√©" else 45 if meeting_data["status"] == "En cours de traitement" else 0,
                "duration": meeting_data["duration"],
                "participants_detected": meeting_data["participants_detected"],
                "audio_file": "demo_audio.wav" if meeting_data["status"] != "En attente" else None,
                "report_file": "report.docx" if meeting_data["status"] == "Termin√©" else None,
                "created_at": (datetime.now() - timedelta(days=20-i*5)).isoformat()
            }
            
            # Save meeting
            meeting_file = meeting_dir / "meeting.json"
            with open(meeting_file, "w", encoding="utf-8") as f:
                json.dump(meeting, f, ensure_ascii=False, indent=2)
            
            # Create demo analysis for completed meetings
            if meeting_data["status"] == "Termin√©":
                create_demo_analysis(meeting_dir, meeting_data, project_data["name"])
            
            # Create demo status for processing meetings
            if meeting_data["status"] == "En cours de traitement":
                create_demo_status(meeting_dir)
            
            project["meetings"].append(meeting)
        
        # Save project
        project_file = project_dir / "project.json"
        with open(project_file, "w", encoding="utf-8") as f:
            json.dump(project, f, ensure_ascii=False, indent=2)
        
        created_projects.append(project)
        print(f"‚úÖ Projet cr√©√©: {project_data['name']} ({len(project_data['meetings'])} meetings)")
    
    print(f"\nüéâ {len(created_projects)} projets de d√©monstration cr√©√©s avec succ√®s!")
    print(f"üìÅ Donn√©es sauvegard√©es dans: {data_dir}")
    print("\nüöÄ Vous pouvez maintenant d√©marrer l'application avec: docker compose up")


def create_demo_analysis(meeting_dir, meeting_data, project_name):
    """Create demo analysis data for a meeting"""
    
    # Sample analysis based on meeting type
    if "lancement" in meeting_data["title"].lower():
        analysis = {
            "meta": {
                "projectName": project_name,
                "meetingTitle": meeting_data["title"],
                "meetingDate": datetime.now().strftime("%Y-%m-%d"),
                "duration": meeting_data["duration"] // 60,
                "participantsDetected": meeting_data["participants_detected"]
            },
            "objectifs": [
                "Lancer officiellement le projet de r√©novation",
                "D√©finir les r√¥les et responsabilit√©s de chaque intervenant",
                "√âtablir le planning g√©n√©ral des travaux",
                "Valider les contraintes techniques et r√©glementaires"
            ],
            "problemes": [
                "D√©lai serr√© pour obtention du permis de construire",
                "Acc√®s difficile au chantier en centre-ville",
                "N√©cessit√© de maintenir l'activit√© dans une partie du b√¢timent"
            ],
            "decisions": [
                "Validation du planning en 3 phases distinctes",
                "Mise en place d'une coordination hebdomadaire",
                "Engagement d'un coordinateur SPS d√©di√©",
                "Utilisation de mat√©riaux √©co-responsables"
            ],
            "actions": [
                {"tache": "D√©poser la demande de permis de construire", "responsable": "Architecte", "echeance": "Dans 2 semaines"},
                {"tache": "√âtablir le plan de s√©curit√© d√©taill√©", "responsable": "Coordinateur SPS", "echeance": "Avant d√©marrage travaux"},
                {"tache": "Organiser r√©union avec riverains", "responsable": "Ma√Ætre d'ouvrage", "echeance": "Semaine prochaine"},
                {"tache": "Finaliser √©tude g√©otechnique", "responsable": "Bureau d'√©tudes", "echeance": "Fin du mois"}
            ],
            "risques": [
                {"risque": "Retard dans l'obtention des autorisations", "impact": "D√©calage planning de 4-6 semaines", "mitigation": "Anticiper les d√©marches et pr√©voir solutions alternatives"},
                {"risque": "D√©couverte d'amiante dans structure existante", "impact": "Surco√ªt et d√©lai suppl√©mentaire", "mitigation": "Diagnostic amiante compl√©mentaire avant travaux"},
                {"risque": "Conditions m√©t√©o d√©favorables", "impact": "Ralentissement des travaux ext√©rieurs", "mitigation": "Planifier travaux int√©rieurs en priorit√©"}
            ],
            "pointsTechniquesBTP": [
                "Renforcement de la structure porteuse par micro-pieux",
                "Isolation thermique par l'ext√©rieur (ITE) avec finition enduit",
                "Remplacement int√©gral des menuiseries par du double vitrage",
                "Mise aux normes √©lectriques et installation VMC double flux",
                "√âtanch√©it√© toiture-terrasse avec v√©g√©talisation extensive"
            ],
            "planning": [
                "Phase 1: Gros ≈ìuvre et structure (3 mois)",
                "Phase 2: Corps d'√©tat secondaires (4 mois)", 
                "Phase 3: Finitions et am√©nagements (2 mois)",
                "R√©ception provisoire pr√©vue en septembre",
                "P√©riode de parfait ach√®vement: 1 an"
            ],
            "budget_chiffrage": [
                "Enveloppe totale: 850 000‚Ç¨ HT",
                "Gros ≈ìuvre: 350 000‚Ç¨ HT (41%)",
                "Second ≈ìuvre: 400 000‚Ç¨ HT (47%)",
                "Am√©nagements: 100 000‚Ç¨ HT (12%)",
                "Provision pour al√©as: 5% du montant total"
            ],
            "divers": [
                "Coordination avec services urbains pour occupation voirie",
                "Mise en place d'une signal√©tique chantier adapt√©e",
                "Communication r√©guli√®re avec copropri√©t√©",
                "Suivi qualit√© par bureau de contr√¥le agr√©√©"
            ],
            "exclusions": [
                "Discussions sur le choix du restaurant pour le pot de fin de chantier",
                "Anecdotes personnelles des intervenants",
                "Commentaires sur la m√©t√©o du jour"
            ],
            "fullTranscriptRef": "transcript.json"
        }
    elif "s√©curit√©" in meeting_data["title"].lower():
        analysis = {
            "meta": {
                "projectName": project_name,
                "meetingTitle": meeting_data["title"],
                "meetingDate": datetime.now().strftime("%Y-%m-%d"),
                "duration": meeting_data["duration"] // 60,
                "participantsDetected": meeting_data["participants_detected"]
            },
            "objectifs": [
                "Faire le point sur les mesures de s√©curit√© en place",
                "Identifier les risques sp√©cifiques √† la phase en cours",
                "V√©rifier la conformit√© des √©quipements de protection",
                "Planifier les formations s√©curit√© n√©cessaires"
            ],
            "problemes": [
                "Signalisation temporaire insuffisante aux abords du chantier",
                "Quelques EPI non conformes d√©tect√©s",
                "Zone de stockage mat√©riaux mal d√©limit√©e"
            ],
            "decisions": [
                "Renforcement imm√©diat de la signalisation",
                "Remplacement des EPI d√©faillants sous 48h",
                "Mise en place d'un p√©rim√®tre s√©curis√© pour stockage",
                "Formation recyclage pour 3 ouvriers"
            ],
            "actions": [
                {"tache": "Commander nouveaux panneaux de signalisation", "responsable": "Chef de chantier", "echeance": "Aujourd'hui"},
                {"tache": "Remplacer EPI d√©faillants", "responsable": "Responsable s√©curit√©", "echeance": "48h"},
                {"tache": "Organiser session formation s√©curit√©", "responsable": "Coordinateur SPS", "echeance": "Semaine prochaine"},
                {"tache": "D√©limiter zone stockage", "responsable": "Chef de chantier", "echeance": "Demain"}
            ],
            "risques": [
                {"risque": "Chute de hauteur lors travaux en fa√ßade", "impact": "Accident grave potentiel", "mitigation": "V√©rification syst√©matique harnais et lignes de vie"},
                {"risque": "Circulation pi√©tons √† proximit√© grue", "impact": "Risque d'accident avec tiers", "mitigation": "Balisage renforc√© et signaleur"},
                {"risque": "Manutention manuelle charges lourdes", "impact": "TMS ouvriers", "mitigation": "Utilisation syst√©matique d'√©quipements de levage"}
            ],
            "pointsTechniquesBTP": [
                "Installation √©chafaudages de fa√ßade conformes NF P93-350",
                "Mise en place garde-corps p√©riph√©riques 1,10m minimum",
                "V√©rification mensuelle des √©quipements de levage",
                "Contr√¥le quotidien des lignes de vie temporaires",
                "Zone de repli s√©curis√©e en cas d'intemp√©ries"
            ],
            "planning": [
                "Inspection s√©curit√© hebdomadaire tous les mardis 8h",
                "Formation nouveau arrivant obligatoire J+1",
                "Contr√¥le APAVE pr√©vu fin de semaine",
                "Exercice √©vacuation planifi√© mois prochain"
            ],
            "budget_chiffrage": [
                "Co√ªt EPI additionnels: 1 200‚Ç¨",
                "Formation s√©curit√©: 800‚Ç¨",
                "Signalisation renforc√©e: 600‚Ç¨",
                "Total mesures correctives: 2 600‚Ç¨"
            ],
            "divers": [
                "Bonne implication g√©n√©rale des √©quipes",
                "M√©t√©o favorable pour travaux ext√©rieurs",
                "Livraison mat√©riaux respect√©e"
            ],
            "exclusions": [
                "Discussion sur match de football",
                "Commentaires sur embouteillages matinaux"
            ],
            "fullTranscriptRef": "transcript.json"
        }
    else:
        # Generic analysis
        analysis = {
            "meta": {
                "projectName": project_name,
                "meetingTitle": meeting_data["title"],
                "meetingDate": datetime.now().strftime("%Y-%m-%d"),
                "duration": meeting_data["duration"] // 60,
                "participantsDetected": meeting_data["participants_detected"]
            },
            "objectifs": [
                "Point d'avancement du projet",
                "Validation des √©tapes franchies",
                "Identification des points de vigilance"
            ],
            "problemes": [
                "L√©ger retard sur certaines t√¢ches",
                "Coordination √† am√©liorer entre corps d'√©tat"
            ],
            "decisions": [
                "R√©ajustement du planning",
                "Mise en place de points quotidiens"
            ],
            "actions": [
                {"tache": "Mettre √† jour le planning", "responsable": "Chef de projet", "echeance": "Cette semaine"},
                {"tache": "Organiser r√©union coordination", "responsable": "Coordinateur", "echeance": "Demain"}
            ],
            "risques": [
                {"risque": "Retard livraison mat√©riaux", "impact": "D√©calage planning", "mitigation": "Anticiper les commandes"}
            ],
            "pointsTechniquesBTP": [
                "Avancement conforme aux sp√©cifications techniques",
                "Contr√¥le qualit√© en cours"
            ],
            "planning": [
                "Respect du planning g√©n√©ral",
                "Quelques ajustements n√©cessaires"
            ],
            "budget_chiffrage": [
                "Budget ma√Ætris√© √† ce stade"
            ],
            "divers": [
                "Bonne coordination g√©n√©rale",
                "Conditions de travail satisfaisantes"
            ],
            "exclusions": [],
            "fullTranscriptRef": "transcript.json"
        }
    
    # Save analysis
    analysis_file = meeting_dir / "analysis.json"
    with open(analysis_file, "w", encoding="utf-8") as f:
        json.dump(analysis, f, ensure_ascii=False, indent=2)
    
    # Create demo transcript
    create_demo_transcript(meeting_dir, meeting_data)


def create_demo_transcript(meeting_dir, meeting_data):
    """Create demo transcript data"""
    
    # Sample transcript segments
    if "lancement" in meeting_data["title"].lower():
        segments = [
            {"speaker": "Chef de projet", "start_time": 0, "end_time": 45, "text": "Bonjour √† tous, merci d'√™tre pr√©sents pour cette r√©union de lancement du projet de r√©novation de l'immeuble Haussman. Nous allons passer en revue les objectifs, le planning et les responsabilit√©s de chacun."},
            {"speaker": "Ma√Ætre d'ouvrage", "start_time": 45, "end_time": 78, "text": "Merci. L'objectif principal est de moderniser compl√®tement ce b√¢timent tout en respectant son caract√®re architectural. Nous avons un budget de 850 000 euros et un d√©lai de 9 mois."},
            {"speaker": "Architecte", "start_time": 78, "end_time": 120, "text": "J'ai finalis√© les plans. Nous devons obtenir le permis de construire rapidement. Il y a quelques contraintes li√©es aux B√¢timents de France qu'il faut int√©grer."},
            {"speaker": "Coordinateur BTP", "start_time": 120, "end_time": 165, "text": "Pour la coordination, je propose des r√©unions hebdomadaires. Il faut aussi pr√©voir l'impact sur le voisinage et la circulation. L'acc√®s au chantier sera compliqu√©."},
            {"speaker": "Chef de projet", "start_time": 165, "end_time": 200, "text": "Tr√®s bien. Nous allons proc√©der en 3 phases distinctes. La premi√®re phase concerne le gros ≈ìuvre, ensuite les corps d'√©tat secondaires, et enfin les finitions."}
        ]
    elif "s√©curit√©" in meeting_data["title"].lower():
        segments = [
            {"speaker": "Responsable s√©curit√©", "start_time": 0, "end_time": 30, "text": "Bonjour, faisons le point sur les mesures de s√©curit√©. J'ai identifi√© quelques points √† am√©liorer lors de ma visite hier."},
            {"speaker": "Chef de chantier", "start_time": 30, "end_time": 55, "text": "Oui, on a eu quelques soucis avec la signalisation. Les panneaux ont √©t√© endommag√©s par le vent. Il faut les remplacer rapidement."},
            {"speaker": "Coordinateur SPS", "start_time": 55, "end_time": 85, "text": "J'ai aussi remarqu√© que certains EPI n'√©taient pas conformes. Il faut faire le point sur les √©quipements de chaque ouvrier."},
            {"speaker": "Responsable s√©curit√©", "start_time": 85, "end_time": 120, "text": "Exactement. Je propose qu'on organise une formation de recyclage pour rappeler les consignes. La s√©curit√© est la priorit√© absolue."},
            {"speaker": "Chef de chantier", "start_time": 120, "end_time": 145, "text": "D'accord. Je vais commander les nouveaux panneaux d√®s aujourd'hui et on d√©limitera mieux la zone de stockage des mat√©riaux."}
        ]
    else:
        segments = [
            {"speaker": "Participant 1", "start_time": 0, "end_time": 30, "text": "Bonjour, commen√ßons par faire le point sur l'avancement du projet."},
            {"speaker": "Participant 2", "start_time": 30, "end_time": 60, "text": "Nous avons respect√© globalement le planning, avec quelques ajustements mineurs √† pr√©voir."},
            {"speaker": "Participant 3", "start_time": 60, "end_time": 90, "text": "Il y a eu un l√©ger retard sur la livraison des mat√©riaux, mais cela reste g√©rable."},
            {"speaker": "Participant 1", "start_time": 90, "end_time": 120, "text": "Tr√®s bien, mettons en place des points quotidiens pour am√©liorer la coordination."}
        ]
    
    transcript = {
        "full_text": " ".join([seg["text"] for seg in segments]),
        "language": "fr",
        "segments": segments,
        "service": "demo"
    }
    
    # Save transcript
    transcript_file = meeting_dir / "transcript.json"
    with open(transcript_file, "w", encoding="utf-8") as f:
        json.dump(transcript, f, ensure_ascii=False, indent=2)


def create_demo_status(meeting_dir):
    """Create demo status for processing meeting"""
    status = {
        "stage": "transcription",
        "progress": 65,
        "message": "Transcription en cours...",
        "estimated_time_remaining": 180,
        "updated_at": datetime.now().isoformat()
    }
    
    status_file = meeting_dir / "status.json"
    with open(status_file, "w", encoding="utf-8") as f:
        json.dump(status, f, ensure_ascii=False, indent=2)


if __name__ == "__main__":
    create_demo_data()
